// Mocks generated by Mockito 5.3.1 from annotations
// in msal_guard/test/guard_router_delegate_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:msal_flutter/msal_flutter.dart' as _i2;
import 'package:msal_guard/msal_guard.dart' as _i5;

import 'guard_router_delegate_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMSALPublicClientApplicationConfig_0 extends _i1.SmartFake
    implements _i2.MSALPublicClientApplicationConfig {
  _FakeMSALPublicClientApplicationConfig_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthenticationServiceTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationServiceTest extends _i1.Mock
    implements _i3.AuthenticationServiceTest {
  MockAuthenticationServiceTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MSALPublicClientApplicationConfig get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: _FakeMSALPublicClientApplicationConfig_0(
          this,
          Invocation.getter(#config),
        ),
      ) as _i2.MSALPublicClientApplicationConfig);
  @override
  set currentAccount(_i2.MSALAccount? _currentAccount) => super.noSuchMethod(
        Invocation.setter(
          #currentAccount,
          _currentAccount,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Stream<_i5.AuthenticationStatus> get authenticationStatus =>
      (super.noSuchMethod(
        Invocation.getter(#authenticationStatus),
        returnValue: _i4.Stream<_i5.AuthenticationStatus>.empty(),
      ) as _i4.Stream<_i5.AuthenticationStatus>);
  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> loadAccounts() => (super.noSuchMethod(
        Invocation.method(
          #loadAccounts,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.MSALResult?> acquireToken(
          {_i2.MSALInteractiveTokenParameters? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #acquireToken,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<_i2.MSALResult?>.value(),
      ) as _i4.Future<_i2.MSALResult?>);
  @override
  _i4.Future<_i2.MSALResult?> acquireTokenSilently(
          {_i2.MSALSilentTokenParameters? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #acquireTokenSilently,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<_i2.MSALResult?>.value(),
      ) as _i4.Future<_i2.MSALResult?>);
  @override
  _i4.Future<dynamic> login({Uri? authorityOverride}) => (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {#authorityOverride: authorityOverride},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> logout({
    _i2.MSALSignoutParameters? signoutParameters,
    _i2.MSALAccount? account,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
          {
            #signoutParameters: signoutParameters,
            #account: account,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
